/// Контролер - Controller
/// Обовʼязки по обробці вхідних системних повідомлень необхідно
/// делегувати спеціальному об'єкту Контролеру.
/// Controller - це об'єкт, який відповідає за обробку системних подій,
/// і при цьому не належить до інтерфейсу користувача.
/// Controller визначає методи для виконання системних операцій.
///
/// Мотивування
///
/// У системі необхідно обробляти вхідні системні події
/// (користувачі натискають на кнопки, спрацьовують таймери тощо).
/// Це можна зробити або в окремому об'єкті (Controller),
/// або розкидати по всьому коду. Наприклад, у потрібному місці з бізнес-логіки
/// можна злазити і дізнатися, натиснув користувач на кнопку чи ні.
/// Другий підхід згідно з досліджуваним шаблоном є неправильним.
/// Річ у тім, що для опрацювання багатопотокового входу (а введення користувача
/// завжди багатопотокове) необхідно писати і підтримувати багатопотоковий код.
/// Таким чином, у коді нашої бізнес-логіки з'являються технічні нюанси
/// синхронізації (м'ютекси, семафори, synchronized - блоки тощо).
/// Наявність усього цього добра збиває з пантелику програміста, який читає код
/// бізнес-логіки. Ба більше, застосування таких прийомів доведеться дублювати
/// в декількох ділянках коду бізнес-логіки. Крім цього, наявність
/// багатопоточності ускладнює код програми на порядок. Багатопотоковий код
/// складно покрити юніт-тестами.

/// Рішення
/// Ідея шаблону полягає в тому, щоб не розмазувати цей складний код по всьому
/// застосунку. Такий об'єкт, як Controller, перетворюватиме багатопотоковий
/// вхід на один потік. Код бізнес-логіки буде однопотоковим.
/// Шаблон не описує те, як Conroller перетворюватиме багатопотоковий вхід на
/// один потік, але він має це так чи інакше робити (ставити запити в чергу,
/// створювати свою копію об'єкта бізнес-логіки для кожного потоку).

/// Переваги
/// У Controller'е зручно накопичувати інформацію про системні події
/// (у разі, якщо системні операції виконуються в деякій певній послідовності).
/// Controller може містити логування, аутентифікацію, авторизацію, кешування.
/// Має місце поліпшення умов для повторного використання компонентів. Коли вся
/// багатопоточність зосереджена в цьому самому Conroller'і, ми можемо
/// переключити код бізнес-логіки на інший вхід, просто дописавши інший
/// Controller (додати підтримку веб-сервісу, перенести код в однопотокове
/// середовище).

/// Недоліки
/// Controller може виявитися перевантаженим. У зв'язку з цим, controller може
/// являти собою package або окремий компонент.

/// Висновок
/// Багатопоточність у коді бізнес-логіки є злом, що ускладнює цей код на
/// порядок. Її слід уникати, виділяючи об'єкт, що перетворює багатопотоковий
/// вхід на однопотоковий будь-якими способами.
/// Цей об'єкт називається Controller'ом.